#!/usr/bin/env node

/* #####################################################################
    ghost-to-wp
    Version 2.0.0
    A script to turn Ghost blog JSON export into Wordpress import XML
    Copyright (C) 2017, 2020, 2021 Hugh Rundle

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

    You can contact Hugh on email hugh [at] hughrundle [dot] net
    or report any issues on GitHub at https://github.com/hughrun/ghost-to-wp
 ##################################################################### */

'use strict'

const fs = require('fs')
const jsontoxml = require('jsontoxml')
const ghostExport = process.argv[2]
const siteUrl = process.argv[3]

// import the json file as JSON
const backup = JSON.parse(fs.readFileSync(ghostExport, 'utf-8'));

// xml header
const now = new Date();
const header =
`<?xml version="1.0" encoding="UTF-8" ?>

<!-- This is a WordPress eXtended RSS file generated by ghost-to-wordpress as an export of your Ghost site. -->
<!-- It contains information about your site's authors, posts, pages, tags, and other content. -->
<!-- You may use this file to transfer that content from Ghost to Wordpress. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, tags, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="ghost-to-wordpress" created="${now}" -->


<rss version="2.0"
  xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:wfw="http://wellformedweb.org/CommentAPI/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:wp="http://wordpress.org/export/1.2/"
>
<channel>\n<wp:wxr_version>1.2</wp:wxr_version>\n`;

// create export file with header.
fs.writeFileSync('WP_import.xml', header);

// functions to process stuff from Ghost

// get the author name
function getAuthorName(post){
  for (let author of backup.db[0].data.users) {
    if (author.id === post.author_id) {
      return author.slug;
    }
  }
}
// published or not?
function getPostStatus(post){
  if (post.status === 'published') {
    return 'publish'
  } else {
    return 'draft'
  }
}
// is it a post or a page?
function getPostType(post){
  if (post.page == '1') {
    return 'page'
  } else {
    return 'post'
  }
}
// is it featured/sticky?
function isPostSticky(post){
  if (post.featured == "1") {
    return true
  } else {
    return false
  }
}

// AUTHORS
console.log(`Converting ${backup.db[0].data.users.length} authors...`);
// for each users
for (let author of backup.db[0].data.users) {
  var authXML = jsontoxml({
    'wp:author': [
      {name:'wp:author_id', text:`${author.id}`},
      {name: 'wp:author_login', text:`<![CDATA[${author.slug}]]>`},
      {name: 'wp:author_email', text:`<![CDATA[${author.email}]]>`},
      {name: 'wp:author_display_name', text:`<![CDATA[${author.name}]]>`}
    ],
  }, {
    prettyPrint: true, 
    indent: '  '
    }
  );
  // append this author's details to the export file.
  fs.appendFileSync('WP_import.xml', authXML);
}

  // reorganise the tags from Ghost into a Map where keys are post IDs and values are arrays of tag IDs
  function repackage(postsTags) {
    const store = new Map();
    for (var tag of postsTags){
      if ( !store.has(tag.post_id) ) {
        store.set( tag.post_id, [tag.tag_id] )
      } else {
        let arr = store.get(tag.post_id)
        arr.push(tag.tag_id)
        store.set( tag.post_id, arr )
      }
    }
    return store
  }

  // Write out categories for each post
  function writeCategories(post, tagStore){
    var sendBack = '';
    for (let [k,v] of tagStore) {
      if (k == post.id) {
        for (let tagNum of v ) {
          // each tag needs its own line in the XML file
          // note that Ghost does not have categories, only tags - there's no distinction
          const ghostTags = backup.db[0].data.tags;
          for (let t of ghostTags) {
            if (t.id == tagNum) {
              let tag_name = jsontoxml.escape(t.name)
              sendBack += `\n  <category domain="post_tag" nicename="${tag_name}"><![CDATA[${tag_name}]]></category>`
            }
          }
        }
      }
    }
    return sendBack
  }

// add generator info
fs.appendFileSync('WP_import.xml', '\n<generator>ghost-to-wordpress v2.0.0</generator>\n');

// POSTS
console.log(`Converting ${backup.db[0].data.posts.length} posts...`);
const tagStore = repackage(backup.db[0].data.posts_tags);
for (let post of backup.db[0].data.posts) {

  var content = post.html

  // fix image directory links if a second argument is provided
    if (content && siteUrl) {
      content = content.replace(/(((http)s?.*)|(__GHOST_URL__))?(\/content\/images\/)/g, `${siteUrl}/wp-content/uploads/`)
    } 

  // if the published date is null, make it equal to 'now'
  // this will only be for draft posts
  var postDate = post.published_at ? post.published_at : new Date().toISOString()

  // make the post XML
  // eliminate any linebreaks, otherwise they mess up the XML and things become unescaped.
  // also clean up any instances of ]] and enclose as CDATA
  var content = content ? jsontoxml.cdata(content.replace(/(\r\n)|\n|\u2028|\u2029/gm,'')) : jsontoxml.cdata('');

  var postXML = jsontoxml({
    'item':[
      {name: 'title', text: `${jsontoxml.escape(post.title)}`},
      {name: 'dc:creator', text:`<![CDATA[${getAuthorName(post)}]]>`},
      {name: 'description', text:' '},
      {name: 'content:encoded', text: content},
      {name: 'wp:post_date', text: `<![CDATA[${postDate}]]>`},
      {name: 'wp:post_name', text: `<![CDATA[${post.slug}]]>`},
      {name: 'wp:status', text: `<![CDATA[${getPostStatus(post)}]]>`},
      {name: 'wp:post_type', text: `<![CDATA[${getPostType(post)}]]>`},
      {name: 'wp:is_sticky', text: `<![CDATA[${isPostSticky(post)}]]>`},
      writeCategories(post, tagStore) 
    ]
  }, {
    prettyPrint: true, 
    indent: '  '
    }
  );

  // ...and append to the file
  fs.appendFileSync('WP_import.xml', postXML);
}

// close off file
const footer = '</channel>\n</rss>';

fs.appendFileSync('WP_import.xml', footer);
console.log('Your file is now ready to import into WordPress!');
